syntax = "proto3";
package cros.factory.hwid.service.appengine.proto.hwid_api_messages_pb2;

import "cros/factory/probe_info_service/app_engine/stubby.proto";

enum Status {
  STATUS_UNSPECIFIED = 0;
  SUCCESS = 1;
  KNOWN_BAD_HWID = 2;
  BAD_REQUEST = 3;
  NOT_FOUND = 4;
  SCHEMA_ERROR = 5;
  YAML_ERROR = 6;
  SERVER_ERROR = 7;
  VALIDATION_EXPIRED = 8;
}

message AvlInfo {
  // Component id.
  int64 cid = 1;
  // Qualification id.
  int64 qid = 2;
  // Displayed AVL component name, this field will be empty in self-service
  // related APIs.
  string avl_name = 3;
  // Whether this AVL info refers to a sub-component.
  bool is_subcomp = 4;
}

// A component of a BOM.
message Component {
  // The type of component.
  string component_class = 1;
  // The canonical name
  string name = 2;
  // The probe result that results for this component.
  string probe_result = 3;
  // Extra fields that show all fields defined in HWID DB.
  repeated Field fields = 4;
  // A bool to indicate if the AVL info exists.
  bool has_avl = 5;
  // AVL info
  AvlInfo avl_info = 6;
}

message Field {
  string name = 1;
  string value = 2;
}

// A label on a BOM.
message Label {
  // The component-class this applies to, if any
  string component_class = 1;
  // The label's name
  string name = 2;
  // The label's value, possibly none.
  string value = 3;
}

// A request for all projects supported by the server.
message ProjectsRequest {
  // List of BOM file versions to include.
  repeated string versions = 1;
}

// A request to validate a config.
message ValidateConfigRequest {
  // The HWID config as a string.
  string hwid_config_contents = 1;
}

// A request to validate a config and update its checksum.
message ValidateConfigAndUpdateChecksumRequest {
  // The HWID config as a string.
  string hwid_config_contents = 1;
  // The previous version of the HWID config.  If present, it will trigger some
  // additional validation checks.
  string prev_hwid_config_contents = 2;
}

// The response to a projects request.
message ProjectsResponse {
  // A list of the supported projects.
  repeated string projects = 1;
  Status status = 2;
}

// A request to query BOM data from a given HWID string.
message BomRequest {
  // The HWID string.
  string hwid = 1;
  // A flag to indicate whether to return the detail fields in response.
  bool verbose = 2;
}

// The response to a BOM request.
message BomResponse {
  // A list of the components in the BOM.
  repeated Component components = 1;
  // A list of labels of the BOM.
  repeated Label labels = 2;
  // Build phase (corresponding to HWID image_id).
  string phase = 3;
  // Error message if there was a problem decoding the HWID, if error is set
  // the other fields in the message should be disregarded.
  string error = 4;
  Status status = 5;
}

// A request to query BOM data from given HWID strings.
message BatchGetBomRequest {
  // The list of HWID strings.
  repeated string hwid = 1;
  // A flag to indicate whether to return the detail fields in response.
  bool verbose = 2;
}

// The response to BatchGetBOMRequest.
message BatchGetBomResponse {
  // The response to a BOM request.
  message Bom {
    // A list of the components in the BOM.
    repeated Component components = 1;
    // A list of labels of the BOM.
    repeated Label labels = 2;
    // Build phase (corresponding to HWID image_id).
    string phase = 3;
    // Error message if there was a problem decoding the HWID, if error is set
    // the other fields in the message should be disregarded.
    string error = 4;
    Status status = 5;
  }
  map<string, Bom> boms = 1;
  string error = 2;
  Status status = 3;
}

// A request to query all HWIDs with the project and filter.
message HwidsRequest {
  // The project as a string.
  string project = 1;
  // The included classes to filter the result.
  repeated string with_classes = 2;
  // The excluded classes to filter the result.
  repeated string without_classes = 3;
  // The included components to filter the result.
  repeated string with_components = 4;
  // The excluded components to filter the result.
  repeated string without_components = 5;
}

// The response to a HWIDs request.
message HwidsResponse {
  // A filtered list of the HWIDs for a project.
  repeated string hwids = 1;
  // Error message if there was a problem looking up the HWIDs.
  string error = 2;
  Status status = 3;
}

// A request to query possible component classes of a project.
message ComponentClassesRequest {
  // The project as a string.
  string project = 1;
}

// The response to a component classes request.
message ComponentClassesResponse {
  // A list of the components for a project.
  repeated string component_classes = 1;
  // Error message if there was a problem looking up components.
  string error = 2;
  Status status = 3;
}

// A request to query all components with the project and filter.
message ComponentsRequest {
  // The project as a string.
  string project = 1;
  // The included classes to filter the result.
  repeated string with_classes = 2;
}

// The response to a components request.
message ComponentsResponse {
  // A filtered list of the components for a project.
  repeated Component components = 1;
  // Error message if there was a problem looking up components.
  string error = 2;
  Status status = 3;
}

message ProbeValueAlignmentStatus {
  enum Case {
    CASE_UNSPECIFIED = 0;

    NO_PROBE_INFO = 1;
    ALIGNED = 2;
    NOT_ALIGNED = 3;
  }
}

message ComponentSupportStatus {
  enum Case {
    CASE_UNSPECIFIED = 0;
    SUPPORTED = 1;
    DEPRECATED = 2;
    UNSUPPORTED = 3;
    UNQUALIFIED = 4;
    DUPLICATE = 5;
  }
}

// A message that summarizes the component change.
message DiffStatus {
  // True if the component is unchanged.  This value should be equals to
  // not (name_changed or support_status_changed or values_changed or
  // probe_value_alignment_status_changed).
  bool unchanged = 1;
  // True if the name is changed.
  bool name_changed = 2;
  // True if the support status is changed.
  bool support_status_changed = 3;
  // True if the fields of this component are changed.
  bool values_changed = 4;
  // The component name before this change.
  string prev_comp_name = 5;
  // The support status before this change.
  string prev_support_status = 6;
  // True if the probe value alignment (w/ the probe info from P.I.S.) status
  // has changed.
  bool probe_value_alignment_status_changed = 7;
  ProbeValueAlignmentStatus.Case prev_probe_value_alignment_status = 8;
  ComponentSupportStatus.Case prev_support_status_case = 9;
}

message NameChangedComponent {
  int64 cid = 1 [deprecated = true];
  int64 qid = 2 [deprecated = true];
  ComponentSupportStatus.Case support_status = 3;
  string component_name = 4;
  // True if this component name has AVL information.
  bool has_cid_qid = 5;
  // The component change summary.  Null means that this component is new.
  DiffStatus diff_prev = 6;
  AvlInfo avl_info = 7;
}

message NameChangedComponents {
  repeated NameChangedComponent entries = 1;
}

// The response to a 'validate config' request.
message ValidateConfigResponse {
  // If an error occurred, this describes the error.
  string error_message = 1;
  Status status = 2;
}

// The response to a 'validate config and update checksum' request.
message ValidateConfigAndUpdateChecksumResponse {
  // The updated HWID config as a string.
  string new_hwid_config_contents = 1;
  // If an error occurred, this describes the error.
  string error_message = 2;
  Status status = 3;
  // Name-changed components per category.
  map<string, NameChangedComponents> name_changed_components_per_category = 4;
  // model name.
  string model = 5;
}

// A request to query SKU info from a given HWID string.
message SkuRequest {
  // The HWID as a string.
  string hwid = 1;
}

// The response to a BOM request.
message SkuResponse {
  // The project listed in the BOM.
  string project = 1;
  // The listed CPU in the BOM.
  string cpu = 2;
  // Total number of bytes of memory in the BOM.
  int64 memory_in_bytes = 3;
  // String combination of project, processor and memory.
  string sku = 4;
  // Error message if there was a problem decoding the HWID, if error is set
  // the other fields in the message should be disregarded.
  string error = 5;
  // A human readable string representing the memory on the device.
  string memory = 6;
  Status status = 7;
  // Strings of warnings as a note of potential issues in the SKU.
  repeated string warnings = 8;
}

// A label of a DUT.
message DutLabel {
  // The name of the label.
  string name = 1;
  // The value of the property associated with this label name.
  string value = 2;
}

// A request to query DUT labels.
message DutLabelsRequest {
  // The HWID as a string.
  string hwid = 1;
}

// The response to a DUT label request.
message DutLabelsResponse {
  // A list of DUTLabel messages.
  repeated DutLabel labels = 1;
  // Details of any errors when constructing the list of labels.
  string error = 2;
  // Possible labels in the labels field.
  repeated string possible_labels = 3;
  Status status = 4;
  // Strings of warnings as a note of potential issues in the DUTLabel.
  repeated string warnings = 5;
}

message GetHwidDbEditableSectionRequest {
  // The project as a string.
  string project = 1;
  // The email of user who makes this request.
  string user_email = 2;
}

message GetHwidDbEditableSectionResponse {
  // The editable section of the queried HWID DB.
  string hwid_db_editable_section = 1;
}

message HwidDbEditableSectionChangeValidationResult {
  enum ErrorCode {
    RESULT_CODE_UNSPECIFIED = 0;  // Reserved.

    SCHEMA_ERROR = 1;
    CONTENTS_ERROR = 2;
  }

  message Error {
    ErrorCode code = 1;
    string message = 2;
  }

  // Empty list if the validation passes.  Otherwise it stores a list of errors
  // detected by the validation process.
  repeated Error errors = 1;

  reserved 2, 3;
}

message ValidateHwidDbEditableSectionChangeRequest {
  // The project as a string.
  string project = 1;
  // The HWID DB contents to validate.
  string new_hwid_db_editable_section = 2;
}

message ValidateHwidDbEditableSectionChangeResponse {
  // An unique identifier to this round of validation.  This ID is required
  // to be attached on other RPCs that needs to be invoke after validation.
  string validation_token = 1;

  // The result of the validation.
  HwidDbEditableSectionChangeValidationResult validation_result = 2;
}

message CreateHwidDbEditableSectionChangeClRequest {
  // The project as a string.
  string project = 1;
  // The HWID DB contents to validate.
  string new_hwid_db_editable_section = 2 [deprecated = true];
  // The ID from ValidateHwidDbEditableSectionChange to
  // justify that the contents have been validated.
  string validation_token = 3;

  string original_requester = 5;
  string description = 4;
  int64 bug_number = 6;
  repeated string reviewer_emails = 7;
  repeated string cc_emails = 8;
  // A bool indicating if this CL should be auto-approved.
  bool auto_approved = 9;
  // The external resource required for creating HWID DB changes.
  HwidDbExternalResource db_external_resource = 10;
  // The exemption to skip DLM validation.
  string dlm_validation_exemption = 11;
}

message CreateHwidDbEditableSectionChangeClResponse {
  // The CL number to the created HWID change request.
  int64 cl_number = 1;
  HwidDbEditableSectionAnalysisReport analysis_report = 2;
}

// External resources that HWID DB can refer to.
message HwidDbExternalResource {
  // Component probe info from AVL.
  repeated
      cros.factory.probe_info_service.app_engine.stubby_pb2.ComponentProbeInfo
          component_probe_infos = 1;
}

message BatchGetHwidDbEditableSectionChangeClInfoRequest {
  // The CL numbers to query.
  repeated int64 cl_numbers = 1;
}

message HwidDbEditableSectionChangeClInfo {
  enum Status {
    STATUS_UNSPECIFIC = 0;

    PENDING = 1;    // The CL is still under review.
    MERGED = 2;     // The CL is already merged.
    ABANDONED = 3;  // The CL is already abandoned.
  }
  Status status = 1;

  message Comment {
    string email = 1;
    string message = 2;
  }

  repeated Comment comments = 2 [deprecated = true];

  message CommentThread {
    string file_path = 1;
    string context = 2;
    repeated Comment comments = 3;
  }
  repeated CommentThread comment_threads = 3;
}

message BatchGetHwidDbEditableSectionChangeClInfoResponse {
  map<int64, HwidDbEditableSectionChangeClInfo> cl_status = 1;
}

// A request for generating the component name for HWID from the given AVL IDs.
message BatchGenerateAvlComponentNameRequest {
  message ComponentNameMaterial {
    string component_class = 1;
    int64 avl_cid = 2;
    int64 avl_qid = 3;
    int32 seq_no = 4;
    bool is_subcomp = 5;
  }

  repeated ComponentNameMaterial component_name_materials = 1;
}

// A response for generating the component name for HWID from the given AVL IDs.
message BatchGenerateAvlComponentNameResponse {
  repeated string component_names = 1;
}

// A request to analyze a HWID config.
message AnalyzeHwidDbEditableSectionRequest {
  // The project name.
  string project = 1;
  // The HWID DB as a string.
  string hwid_db_editable_section = 2;
  // A bool indicating if HWID DB lines are required.
  bool require_hwid_db_lines = 3;
}

// The response for analyzing the HWID config.
message AnalyzeHwidDbEditableSectionResponse {
  // The result of the validation.
  HwidDbEditableSectionChangeValidationResult validation_result = 1;
  // An analysis report for a HWID config.
  HwidDbEditableSectionAnalysisReport analysis_report = 2;
  // An unique identifier to this round of validation.  This ID is required
  // to be attached on other RPCs that needs to be invoke after validation.
  string validation_token = 3;
}

// An analysis report for a HWID config.
message HwidDbEditableSectionAnalysisReport {
  // A part of a line in HWID config.
  message HwidDbLinePart {
    oneof part_type {
      // The text value if this part represents a fixed text snippet.
      string fixed_text = 1;
      // ID to the component info if this part represents that component's name
      // string.
      string component_name_field_id = 2;
      // ID to the component info if this part represents that component's
      // support status value.
      string support_status_field_id = 3;
    }
  }

  // A line in HWID config.
  message HwidDbLine {
    enum HwidDbLineModificationStatus {
      HWID_DB_LINE_MODIFICATION_STATUS_UNSPECIFIC = 0;  // Reserved.
      NOT_MODIFIED = 1;
      MODIFIED = 2;
      NEWLY_ADDED = 3;
    }
    HwidDbLineModificationStatus modification_status = 1;
    repeated HwidDbLinePart parts = 2;
  }

  message ComponentInfo {
    // The component type.
    string component_class = 1;
    // The original component name in this field.
    string original_name = 2;
    // The original support status value.
    string original_status = 3;

    // Whether this component is newly added comparing to the previous version
    // of HWID DB.
    bool is_newly_added = 4;
    // The corresponding AVL info of the original component name.
    AvlInfo avl_info = 5;
    // Whether the original component name contains the AVL info.
    bool has_avl = 6;

    // The expected sequential number of this component.
    int32 seq_no = 7;
    // The expected component name if the original sequential number is invalid.
    string component_name_with_correct_seq_no = 8;
    // The component change summary.  Null means that this component is new.
    DiffStatus diff_prev = 9;
    // True if this component is a null one (default component).
    bool null_values = 10;
    // If the component probe info is not provided in the context, i.e. during
    // the RPC AnalyzeHwidDbEditableSectionChange, this value will be preserved
    // from the previous status for existing components, and will be unspecified
    // for new components.
    ProbeValueAlignmentStatus.Case probe_value_alignment_status = 11;
    ComponentSupportStatus.Case support_status_case = 12;
  }

  // A list of support status values that is available no matter the AVL entry
  // is qualified or not.
  repeated string unqualified_support_status = 1;

  // A list of support status values that is only available when the AVL entry
  // is qualified.
  repeated string qualified_support_status = 2;

  repeated HwidDbLine hwid_config_lines = 3;
  map<string, ComponentInfo> component_infos = 4;

  // A message to indicate top-level HWID DB section changes.
  message HwidSectionChange {
    enum ChangeStatus {
      CHANGE_STATUS_UNSPECIFIED = 0;
      UNTOUCHED = 1;
      TOUCHED = 2;
    }

    ChangeStatus image_id_change_status = 1;
    ChangeStatus pattern_change_status = 2;
    map<string, ChangeStatus> encoded_fields_change_status = 3;
    ChangeStatus components_change_status = 4;
    ChangeStatus rules_change_status = 5;
    ChangeStatus framework_version_change_status = 6;
  }

  // A message to indicate top-level HWID DB section changes.
  HwidSectionChange touched_sections = 5;
  // A bool indicating if the external HWID DB was unchanged.
  bool noop_for_external_db = 6;
}

message HwidBundleResourceInfo {
  // Resource info that HWID Server used to look up bundle resources for
  // Factory HWID Consultant to create HWID bundles.
  HwidDbEditableSectionAnalysisReport db_info = 1;
}

message HwidBundleResource {
  // External resources for Factory HWID Consultant to create HWID bundles.
  HwidDbExternalResource db_external_resource = 1;
}

message HwidBundle {
  bytes contents = 1;
  string name_ext = 2;
}

message GetHwidBundleResourceInfoRequest {
  string project = 1;
}

message GetHwidBundleResourceInfoResponse {
  string bundle_creation_token = 1;
  HwidBundleResourceInfo resource_info = 2;
}

message CreateHwidBundleRequest {
  string project = 1;
  string bundle_creation_token = 2 [deprecated = true];
  HwidBundleResource resource = 3 [deprecated = true];
}

message CreateHwidBundleResponse {
  HwidBundle hwid_bundle = 1;
}

// Record generated during finalizing factory bundle.
message FactoryBundleRecord {
  // Board name for the facory bundle.
  string board = 1;
  // Project name for the facory bundle.
  string project = 2;
  // Firmware image channel downloaded from CPFE.
  string channel = 3;
  // Firmware signer extracted from the firmware-updater.
  string firmware_signer = 4;

  message FirmwareRecord {
    message FirmwareInfo {
      string hash = 1;
      string version = 2;
    }
    message FirmwareKeys {
      string key_recovery = 1;
      string key_root = 2;
    }

    // Model name of firmware info.
    string model = 1;
    // Firmware keys
    FirmwareKeys firmware_keys = 2;
    // RO AP firmware info
    FirmwareInfo ro_main_firmware = 3;
    // RO EC firmware info
    FirmwareInfo ro_ec_firmware = 4;
    // RO PD firmware info
    FirmwareInfo ro_pd_firmware = 5;
    // Whether the firmware status is supported.
    bool supported = 6;
    // RO FP firmware info.
    // Note that it is possible to have multiple FP firmwares in a model.
    repeated FirmwareInfo ro_fp_firmware = 7;
  }

  // Firmware record of each model.
  // One project may have different model designs.
  repeated FirmwareRecord firmware_records = 5;
}

// The request for create HWID DB firmware info update CL.
message CreateHwidDbFirmwareInfoUpdateClRequest {
  // Record generated during finalizing factory bundle.
  FactoryBundleRecord bundle_record = 1;
  // Original requester from Easy Bundle Creation.
  string original_requester = 2;
  // Additional description to be commented on CL.
  string description = 3;
  // Reviewer list for this CL.
  repeated string reviewer_emails = 4;
  // CC list for this CL.
  repeated string cc_emails = 5;
  // A bool indicating if this CL should be auto-approved.
  bool auto_approved = 6;
  // ID of related bug.
  int64 bug_number = 7;
}

// HWID DB Commit info
message HwidDbCommit {
  // CL number for the corresponding commit.
  int64 cl_number = 1;
  // New HWID DB contents to be committed
  string new_hwid_db_contents = 2;
}

// The response contains firmware info update CLs.
message CreateHwidDbFirmwareInfoUpdateClResponse {
  // Map project name to the commit created.
  map<string, HwidDbCommit> commits = 1;
}

// The request of create initial HWID DB CL.
message CreateHwidDbInitClRequest {
  // Project name of HWID DB to be initialized.
  string project = 1;
  // Board name of the project.
  string board = 2;
  // Initial build phase.
  string phase = 3;
  // ID of related bug.
  int64 bug_number = 4;
  // Original initialization requester.
  string original_requester = 5;
  // Reviewer list for this CL.
  repeated string reviewer_emails = 6;
  // CC list for this CL.
  repeated string cc_emails = 7;
  // A bool indicating if this CL should be auto-approved.
  bool auto_approved = 8;
}

// The response of create initial HWID DB CL.
message CreateHwidDbInitClResponse {
  // Commit created.
  HwidDbCommit commit = 1;
}

// The action to a CL.
message ClAction {
  // Approval cases.
  enum ApprovalCase {
    APPROVAL_CASE_UNSPECIFIED = 0;
    APPROVED = 1;
    REJECTED = 2;
    NEED_MANUAL_REVIEW = 3;
    DONT_CARE = 4;
  }
  // The case of this action.
  ApprovalCase approval_case = 1;
  // The reasons of this action.
  repeated string reasons = 2;
  // The additional reviewers to be added.
  repeated string reviewers = 3;
  // The additional CC reviewers to be added.
  repeated string ccs = 4;
}

// The request of setting CL approval status.
message SetChangeClBotApprovalStatusRequest {
  // A map of CL numbers to CL actions.
  map<int64, ClAction> cl_actions = 1;
}

// The response of setting CL approval status.
message SetChangeClBotApprovalStatusResponse {}

// The request of setting firmware info support status.
message SetFirmwareInfoSupportStatusRequest {
  // Project name.
  string project = 1;
  // ID of related bug.
  int64 bug_number = 2;
  // Additional description to be commented on CL.
  string description = 3;
  // Original requester from Easy Bundle Creation.
  string original_requester = 4;
  // Version string of firmware to be queried.
  string version_string = 5;
  // Reviewer list for this CL.
  repeated string reviewer_emails = 6;
  // CC list for this CL.
  repeated string cc_emails = 7;
  // A bool indicating if this CL should be auto-approved.
  bool auto_approved = 8;
}

// The response of setting firmware info support status.
message SetFirmwareInfoSupportStatusResponse {
  // Created commit.
  HwidDbCommit commit = 1;
}

// The request to split HWID DB changes.
message SplitHwidDbChangeRequest {
  // The session token of the CL creation workflow.
  string session_token = 1;
  // The external resource required for validating the AVL alignment status.
  HwidDbExternalResource db_external_resource = 2;
}

// The change unit with information for making approval decisions.
message ChangeUnit {
  // The information of AddEncodingCombination change unit.
  message AddEncodingCombination {
    // The component class.
    string comp_cls = 1;
    // The info of components included in the combination.
    repeated HwidDbEditableSectionAnalysisReport.ComponentInfo comp_info = 2;
  }

  // The information of NewImageIdTo{Existing,New}EncodingPattern change unit.
  message NewImageId {
    // The images names.
    repeated string image_names = 1;
    // True if this change unit is a AssignBitMappingToEncodingPattern change
    // unit with a new pattern.
    bool with_new_encoding_pattern = 2;
  }

  // The information of ReplaceRules change unit.  Currently no extra
  // information is required.
  message ReplaceRules {}

  // The information of change unit.
  oneof change_unit_type {
    HwidDbEditableSectionAnalysisReport.ComponentInfo comp_change = 1;
    AddEncodingCombination add_encoding_combination = 2;
    NewImageId new_image_id = 3;
    ReplaceRules replace_rules = 4;
  }
}

// The response of splitted HWID DB change units.
message SplitHwidDbChangeResponse {
  // The mapping of identity to change unit.
  map<string, ChangeUnit> change_units = 1;
}

// The request of creating splitted HWID DB Cls.
message CreateSplittedHwidDbClsRequest {
  // The session token of the CL creation workflow.
  string session_token = 1;
  // The mapping of identity to approval status.
  map<string, ClAction> approval_status = 2;
  string original_requester = 3;
  string description = 4;
  int64 bug_number = 5;
}

// The response of creating splitted HWID DB Cls.
message CreateSplittedHwidDbClsResponse {
  // A bool indicating whether a CL of the auto-mergeable change is created.
  bool auto_mergeable_change_cl_created = 1;
  // The CL number of the auto-mergeable change.
  int64 auto_mergeable_change_cl_number = 2;
  // The identities of auto-mergeable change units.
  repeated string auto_mergeable_change_unit_identities = 3;
  // A bool indicating whether a CL of the review-required change is created.
  bool review_required_change_cl_created = 4;
  // The CL number of the review-required change.
  int64 review_required_change_cl_number = 5;
  // The identities of review-required change units.
  repeated string review_required_change_unit_identities = 6;
  // The final commit of the HWID DB change.  Could be auto-mergeable one if
  // there is no CL of review-required change units.
  HwidDbCommit final_hwid_db_commit = 7;
}

service HwidService {
  rpc GetProjects(ProjectsRequest) returns (ProjectsResponse);

  rpc GetBom(BomRequest) returns (BomResponse);

  rpc GetSku(SkuRequest) returns (SkuResponse);

  rpc GetHwids(HwidsRequest) returns (HwidsResponse);

  rpc GetComponentClasses(ComponentClassesRequest)
      returns (ComponentClassesResponse);

  rpc GetComponents(ComponentsRequest) returns (ComponentsResponse);

  // Deprecated.
  // TODO(yhong): Remove this RPC when all clients are migrated.
  rpc ValidateConfig(ValidateConfigRequest) returns (ValidateConfigResponse);

  // Deprecated.
  // TODO(yhong): Remove this RPC when all clients are migrated.
  rpc ValidateConfigAndUpdateChecksum(ValidateConfigAndUpdateChecksumRequest)
      returns (ValidateConfigAndUpdateChecksumResponse);

  rpc GetDutLabels(DutLabelsRequest) returns (DutLabelsResponse);

  rpc GetHwidDbEditableSection(GetHwidDbEditableSectionRequest)
      returns (GetHwidDbEditableSectionResponse);

  // Deprecated.  Use AnalyzeHwidDbEditableSection instead.
  // Validates a change of HWID DB.
  //
  // This RPC compares the given updated HWID DB contents with the
  // current one and validates the difference.  In addition, if the
  // change is valid, this RPC also responds details of the change
  // like what HWID components are introduced, etc.
  rpc ValidateHwidDbEditableSectionChange(
      ValidateHwidDbEditableSectionChangeRequest)
      returns (ValidateHwidDbEditableSectionChangeResponse);

  // Create a CL to change the HWID DB contents.
  //
  // The canonical error `ABORTED` will be raised if the given validation
  // result ID is expired.  This usually happens if the upstream HWID DB
  // has changed since the last validation.
  rpc CreateHwidDbEditableSectionChangeCl(
      CreateHwidDbEditableSectionChangeClRequest)
      returns (CreateHwidDbEditableSectionChangeClResponse);

  // Set review votes per CL.
  rpc SetChangeClBotApprovalStatus(SetChangeClBotApprovalStatusRequest)
      returns (SetChangeClBotApprovalStatusResponse);

  // Get the basic info of the CLs that change HWID DBs.
  rpc BatchGetHwidDbEditableSectionChangeClInfo(
      BatchGetHwidDbEditableSectionChangeClInfoRequest)
      returns (BatchGetHwidDbEditableSectionChangeClInfoResponse);

  // Generate the component names from the specific AVL IDs.
  rpc BatchGenerateAvlComponentName(BatchGenerateAvlComponentNameRequest)
      returns (BatchGenerateAvlComponentNameResponse);

  // Analyze the given HWID DB payload.
  rpc AnalyzeHwidDbEditableSection(AnalyzeHwidDbEditableSectionRequest)
      returns (AnalyzeHwidDbEditableSectionResponse);

  rpc BatchGetBom(BatchGetBomRequest) returns (BatchGetBomResponse);

  // Get the metadata of resources that will be included in the HWID bundle.
  rpc GetHwidBundleResourceInfo(GetHwidBundleResourceInfoRequest)
      returns (GetHwidBundleResourceInfoResponse);

  // Create the HWID bundle for specific project.
  rpc CreateHwidBundle(CreateHwidBundleRequest)
      returns (CreateHwidBundleResponse);

  // Create CL to update HWID firmware info
  //
  // This API is designed to be requested by Easy Bundle Creation. Ease Bundle
  // Creation service will derive firmware info and send request to auto update
  // HWID DB without being approved.
  rpc CreateHwidDbFirmwareInfoUpdateCl(CreateHwidDbFirmwareInfoUpdateClRequest)
      returns (CreateHwidDbFirmwareInfoUpdateClResponse);

  // Create initial HWID DB.
  rpc CreateHwidDbInitCl(CreateHwidDbInitClRequest)
      returns (CreateHwidDbInitClResponse);

  // Set support status for firmware info components.
  rpc SetFirmwareInfoSupportStatus(SetFirmwareInfoSupportStatusRequest)
      returns (SetFirmwareInfoSupportStatusResponse);

  // Split HWID DB change into auto-mergeable and review-required changes.
  rpc SplitHwidDbChange(SplitHwidDbChangeRequest)
      returns (SplitHwidDbChangeResponse);

  // Create HWID DB Cls by setting approval status per change unit.
  rpc CreateSplittedHwidDbCls(CreateSplittedHwidDbClsRequest)
      returns (CreateSplittedHwidDbClsResponse);
}
